# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['DirectValueMeta', 'DocumentedEnum', 'noop']

# Cell
from enum import Enum, EnumMeta

# Cell
class DirectValueMeta(EnumMeta):
    "Metaclass that allows for directly getting an enum attribute"
    def __getattribute__(cls, name):
        value = super().__getattribute__(name)
        if isinstance(value, cls):
            value = value.value
        return value

# Cell
class DocumentedEnum(Enum, metaclass=DirectValueMeta):
    """
    An `Enum` that can have its members have custom docstrings

    Based on https://stackoverflow.com/questions/19330460/how-do-i-put-docstrings-on-enums
    """

    def __new__(cls, *args):
        obj = object.__new__(cls)
        if len(args) > 1:
            obj._value_ = args[0]
        else:
            obj._value_ = None
        return obj

    def __repr__(self):
        r = f'<{self.__class__.__name__}.{self._name_}: {self._value_}>'
        if hasattr(self, '__doc__'):
            r += f'\n  {self.__doc__}'
        return r


    def __init__(self, *args):
        """
        Creates a generic enumeration with potential assigning of a member docstring

        Should be passed in the form of:
          value, docstring
        Or:
          docstring
        """
        if len(args) == 1:
            self._value_ = self._name_.lower()
        if isinstance(args[-1], str):
            self.__doc__ = args[-1]

# Cell
def noop (x=None, *args, **kwargs):
    "Do nothing"
    return x